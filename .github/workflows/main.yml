name: Main

on:
  push:

env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_AWS_BETA:  ${{ vars.KOSLI_AWS_BETA }}          # aws-beta
  KOSLI_DEBUG:     ${{ vars.KOSLI_DEBUG }}             # true/false
  KOSLI_DRY_RUN:   ${{ vars.KOSLI_DRY_RUN }}           # false
  KOSLI_HOST:      ${{ vars.KOSLI_HOST }}              # https://app.kosli.com
  KOSLI_ORG:       ${{ vars.KOSLI_ORG }}               # cyber-dojo
  KOSLI_FLOW:      ${{ vars.KOSLI_FLOW }}              # exercises-start-points-ci
  KOSLI_TRAIL:     ${{ github.sha }}

  AWS_ECR_ID:          ${{ vars.AWS_ECR_ID }}
  AWS_REGION:          ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID_BETA: ${{ vars.AWS_ACCOUNT_ID_BETA }}
  DOCKER_API_VERSION:  ${{ vars.DOCKER_API_VERSION }}
  SERVICE_NAME:        ${{ github.event.repository.name }}  # exercises-start-points

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      aws_account_id_beta:      ${{ steps.vars.outputs.aws_account_id_beta }}
      ecr_registry:             ${{ steps.vars.outputs.ecr_registry }}
      aws_region:               ${{ steps.vars.outputs.aws_region }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}
      service_name:             ${{ steps.vars.outputs.service_name }}
      image_tag:                ${{ steps.vars.outputs.image_tag }}
      image_name:               ${{ steps.vars.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: |
          ECR_REGISTRY="${AWS_ECR_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"          
          IMAGE_TAG=${GITHUB_SHA:0:7}
          IMAGE_NAME="${ECR_REGISTRY}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"

          echo "aws_account_id_beta=${AWS_ACCOUNT_ID_BETA}"   >> ${GITHUB_OUTPUT}          
          echo "ecr_registry=${ECR_REGISTRY}"                 >> ${GITHUB_OUTPUT}
          echo "aws_region=${AWS_REGION}"                     >> ${GITHUB_OUTPUT}
          echo "gh_actions_iam_role_name=gh_actions_services" >> ${GITHUB_OUTPUT}
          echo "service_name=${{ env.SERVICE_NAME }}"         >> ${GITHUB_OUTPUT}
          echo "image_tag=${IMAGE_TAG}"                       >> ${GITHUB_OUTPUT}
          echo "image_name=${IMAGE_NAME}"                     >> ${GITHUB_OUTPUT}          

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli begin trail "${KOSLI_TRAIL}"
            --template-file=.kosli.yml


  pull-request:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      id-token:      write
      contents:      read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        run:
          kosli attest pullrequest github
            --github-token=${{ secrets.GITHUB_TOKEN }}
            --name=pull-request


  snyk-code-scan:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      SARIF_FILENAME: snyk.code.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk code test 
            --policy-path=.snyk 
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 
            .

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        run:
          kosli attest snyk
            --attachments=.snyk
            --name=exercises-start-points.snyk-code-scan 
            --scan-results="${SARIF_FILENAME}"


  build-image:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
      IMAGE_TAG:  ${{ needs.setup.outputs.image_tag }}
    permissions:
      id-token: write
      contents: write
    outputs:
      tagged_image_name: ${{ needs.setup.outputs.image_name }}
      digest:            ${{ steps.docker-push.outputs.digest }}
      cache_path:        ${{ steps.set-cache.outputs.cache_path }}
      cache_key:         ${{ steps.set-cache.outputs.cache_key }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build image
        run: |
          git fetch origin main:main || true
          make image
          docker tag cyberdojo/${SERVICE_NAME}:${IMAGE_TAG} "${IMAGE_NAME}"           

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:            ${{ needs.setup.outputs.aws_region }}
          role-duration-seconds: 900
          role-session-name:     ${{ github.event.repository.name }}
          role-to-assume:        arn:aws:iam::${{ needs.setup.outputs.aws_account_id_beta }}:role/${{ needs.setup.outputs.gh_actions_iam_role_name }}
          mask-aws-account-id:   no

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to registry and make digest available
        id: docker-push
        run: |
          FILENAME=/tmp/docker-push.log
          docker push "${IMAGE_NAME}" > "${FILENAME}"
          # Last line of FILENAME
          # 40907a7: digest: sha256:6fbb86fc2f21bf090a74282bdc37e713cdf7f227b30571a57e5de9622cb01e34 size: 3036
          DIGEST="$(cat "${FILENAME}" | tail -n 1 | cut -d':' -f4 | cut -d' ' -f1)"
          echo "DIGEST=${DIGEST}" >> ${GITHUB_ENV}
          echo "digest=${DIGEST}" >> ${GITHUB_OUTPUT}

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli attest artifact "${IMAGE_NAME}"          
            --fingerprint="${{ steps.docker-push.outputs.digest }}"
            --name=exercises-start-points

      - name: Set image cache outputs
        id: set-cache
        run: |
          CACHE_PATH=${{ env.DIGEST }}.tar
          echo "CACHE_PATH=${CACHE_PATH}" >> ${GITHUB_ENV}
          echo "cache_path=${CACHE_PATH}" >> ${GITHUB_OUTPUT}
          echo "CACHE_KEY=${IMAGE_NAME}"  >> ${GITHUB_ENV} 
          echo "cache_key=${IMAGE_NAME}"  >> ${GITHUB_OUTPUT} 

      - name: Save image
        run:
          docker image save ${{ env.CACHE_KEY }}
            --output ${{ env.CACHE_PATH }}

      - name: Cache image
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key:  ${{ env.CACHE_KEY }}


  snyk-container-scan:
    needs: [build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.build-image.outputs.tagged_image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.digest }}
      CACHE_KEY:         ${{ needs.build-image.outputs.cache_key }}
      CACHE_PATH:        ${{ needs.build-image.outputs.cache_path }}
      SARIF_FILENAME:    snyk.container.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Retrieve Docker image from cache
        uses: actions/cache@v4
        with:
          key:  ${{ env.CACHE_KEY }}
          path: ${{ env.CACHE_PATH }}

      - name: Load Docker image
        run:
          docker image load 
            --input "${{ env.CACHE_PATH }}"

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk container test ${IMAGE_NAME} 
            --policy-path=.snyk
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        run:
          kosli attest snyk
            --attachments=.snyk          
            --name=exercises-start-points.snyk-container-scan 
            --scan-results="${SARIF_FILENAME}"


  sdlc-control-gate:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [build-image, pull-request, snyk-container-scan, snyk-code-scan]
    runs-on: ubuntu-latest
    env:
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.digest }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Display current compliance
        run:
          kosli get trail "${KOSLI_TRAIL}"

      - name: Kosli SDLC gate to short-circuit the workflow
        run:
          kosli assert artifact
            --environment=${KOSLI_AWS_BETA}


  approve-deployment-to-beta:
    needs: [build-image, sdlc-control-gate]
    runs-on: ubuntu-latest
    env:
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.digest }}
    environment:
      name: staging
      url:  https://beta.cyber-dojo.org
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest approval of deployment to Kosli
        run:
          kosli report approval
            --approver="${{ github.actor }}"
            --environment=${KOSLI_AWS_BETA}


  deploy-to-beta:
    needs: [setup, build-image, approve-deployment-to-beta]
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.23
    with:
      aws_region:             ${{ needs.setup.outputs.aws_region }}
      aws_role_arn:           arn:aws:iam::${{ needs.setup.outputs.aws_account_id_beta }}:role/${{ needs.setup.outputs.gh_actions_iam_role_name }}
      aws_default_region:     ${{ needs.setup.outputs.aws_region }}
      aws_role_duration:      900
      working_directory:      deployment/terraform/
      tf_apply:               true
      tf_version:             v1.9.1
      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ needs.build-image.outputs.tagged_image_name }}@sha256:${{ needs.build-image.outputs.digest }}"}'


# Deployment to aws-prod Environment is done with a Release/Promotion workflow.
# See https://github.com/cyber-dojo/aws-prod-co-promotion
